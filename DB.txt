DROP DATABASE IF EXISTS SB_AM;
CREATE DATABASE SB_AM;
USE SB_AM;

CREATE TABLE article(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, regDate DATETIME NOT NULL
	, updateDate DATETIME NOT NULL
	, title VARCHAR(100) NOT NULL
	, `body` TEXT NOT NULL
);

ALTER TABLE article ADD COLUMN memberId INT UNSIGNED NOT NULL AFTER updateDate;
ALTER TABLE article ADD COLUMN boardId INT UNSIGNED NOT NULL AFTER updateDate;
ALTER TABLE article ADD COLUMN views INT UNSIGNED NOT NULL DEFAULT 0;

CREATE TABLE `member`(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, regDate DATETIME NOT NULL
	, updateDate DATETIME NOT NULL
	, loginId VARCHAR(100) NOT NULL
	, loginPw VARCHAR(100) NOT NULL
	, `name` VARCHAR(20) NOT NULL
	, profileImage LONGBLOB DEFAULT NULL
	, email VARCHAR(100) NOT NULL
);

ALTER TABLE `member` MODIFY COLUMN loginId VARCHAR(100) NOT NULL UNIQUE;

CREATE TABLE board(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, `name` VARCHAR(20) NOT NULL COMMENT '게시판 이름'
);

CREATE TABLE reply(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, regDate DATETIME NOT NULL
	, updateDate DATETIME NOT NULL
	, memberId INT UNSIGNED NOT NULL
	, relTypeCode VARCHAR(20) NOT NULL
	, relId INT UNSIGNED NOT NULL
	, `body` TEXT NOT NULL
);

CREATE TABLE likePoint(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, memberId INT UNSIGNED NOT NULL
	, relTypeCode VARCHAR(20) NOT NULL
	, relId INT UNSIGNED NOT NULL
	, `point` INT NOT NULL DEFAULT 1
);

CREATE TABLE `team` (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, 
    teamName VARCHAR(100) NOT NULL,             
    region VARCHAR(50) NOT NULL,               
    slogan VARCHAR(255) NOT NULL,              
    teamImage LONGBLOB  DEFAULT NULL,            
    createdBy INT UNSIGNED NOT NULL,  -- 팀 생성자 (회원 ID FK)
    teamLeader VARCHAR(50) NOT NULL,        
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 생성일
    updateDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    views INT UNSIGNED NOT NULL DEFAULT 0,  
    FOREIGN KEY (createdBy) REFERENCES `member`(id) ON DELETE CASCADE,
    wins INT UNSIGNED NOT NULL DEFAULT 0, 
    draws INT UNSIGNED NOT NULL DEFAULT 0,
    losses INT UNSIGNED NOT NULL DEFAULT 0,
    points INT UNSIGNED NOT NULL DEFAULT 0
);

CREATE TABLE teamReply(
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
	, regDate DATETIME NOT NULL
	, updateDate DATETIME NOT NULL
	, memberId INT UNSIGNED NOT NULL
	, relId INT UNSIGNED NOT NULL
	, `body` TEXT NOT NULL
);


CREATE TABLE `team_member` (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -- 팀원 ID
    teamId INT UNSIGNED NOT NULL,               -- 팀 ID FK
    memberId INT UNSIGNED NOT NULL,             -- 회원 ID FK
    ROLE ENUM('LEADER', 'MEMBER') NOT NULL DEFAULT 'MEMBER', -- 역할 (팀장, 팀원)
    STATUS ENUM('PENDING', 'APPROVED', 'REJECTED') NOT NULL DEFAULT 'PENDING', -- 상태
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 가입 요청일
    updateDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- 상태 변경일
    FOREIGN KEY (teamId) REFERENCES `team`(id) ON DELETE CASCADE,
    FOREIGN KEY (memberId) REFERENCES `member`(id) ON DELETE CASCADE
);

CREATE TABLE chat_room (
    room_id VARCHAR(100) PRIMARY KEY,
    room_name VARCHAR(255) NOT NULL,
    created_by VARCHAR(100) NOT NULL,
    created_at DATETIME NOT NULL,
    participant_count INT NOT NULL DEFAULT 1,
    invite_members TEXT
);

CREATE TABLE chat_message (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    room_id VARCHAR(100) NOT NULL,
    sender VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    TIMESTAMP DATETIME NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (room_id) REFERENCES chat_room(room_id) ON DELETE CASCADE
);

CREATE TABLE chat_room_member (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    room_id VARCHAR(100) NOT NULL,
    member_id INT UNSIGNED NOT NULL,
    FOREIGN KEY (room_id) REFERENCES chat_room(room_id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES MEMBER(id) ON DELETE CASCADE
);

INSERT INTO article
	SET regDate = NOW()
			, updateDate = NOW()
			, memberId = 1
			, boardId = 1
			, title = '공지1'
			, `body` = '공지내용1';
INSERT INTO article
	SET regDate = NOW()
			, updateDate = NOW()
			, memberId = 3
			, boardId = 2
			, title = '제목2'
			, `body` = '내용2';
INSERT INTO article
	SET regDate = NOW()
			, updateDate = NOW()
			, memberId = 2
			, boardId = 2
			, title = '제목3'
			, `body` = '내용3';

INSERT INTO `member`
	SET regDate = NOW()
			, updateDate = NOW()
			, loginId = 'test1'
			, loginPw = SHA2('test1', 256)
			, `name` = '유저1'
			, email = 'test1@test.com';
INSERT INTO `member`
	SET regDate = NOW()
			, updateDate = NOW()
			, loginId = 'test2'
			, loginPw = SHA2('test2', 256)
			, `name` = '유저2'
			, email = 'test2@test.com';
INSERT INTO `member`
	SET regDate = NOW()
			, updateDate = NOW()
			, loginId = 'test3'
			, loginPw = SHA2('test3', 256)
			, `name` = '유저3'
			, email = 'goh9788@naver.com';
INSERT INTO board
	SET `name` = '공지사항';
INSERT INTO board
	SET `name` = '자유';
			
INSERT INTO reply
	SET regDate = NOW()
        , updateDate = NOW()
        , memberId = 1
        , relTypeCode = 'article'
        , relId = 2
        , `body` = '댓글테스트1';
INSERT INTO reply
	SET regDate = NOW()
        , updateDate = NOW()
        , memberId = 1
        , relTypeCode = 'article'
        , relId = 1
        , `body` = '댓글테스트2';
INSERT INTO reply
	SET regDate = NOW()
        , updateDate = NOW()
        , memberId = 3
        , relTypeCode = 'article'
        , relId = 1
        , `body` = '댓글테스트3';
INSERT INTO reply
	SET regDate = NOW()
        , updateDate = NOW()
        , memberId = 2
        , relTypeCode = 'article'
        , relId = 3
        , `body` = '댓글테스트4';

INSERT INTO likePoint
	SET memberId = 2
        , relTypeCode = 'article'
        , relId = 3;
INSERT INTO likePoint
	SET memberId = 1
        , relTypeCode = 'article'
        , relId = 3;
INSERT INTO likePoint
	SET memberId = 1
        , relTypeCode = 'article'
        , relId = 1;
INSERT INTO likePoint
	SET memberId = 3
        , relTypeCode = 'article'
        , relId = 2;
        			
SELECT * FROM article;
SELECT * FROM `member`;
SELECT * FROM board;
SELECT * FROM reply;
SELECT * FROM likePoint;
SELECT * FROM `team`;
SELECT * FROM teamReply;
SELECT * FROM `team_member`;
SELECT * FROM chat_room;
SELECT * FROM chat_message;
SELECT * FROM chat_room_member;


INSERT INTO article
(
    regDate, updateDate, boardId, memberId, title, `body`
)
SELECT NOW()
        , NOW()
        , FLOOR(RAND() * 2) + 1
        , FLOOR(RAND() * 3) + 1
        , CONCAT('제목_', FLOOR(RAND() * 10000))
        , CONCAT('내용_', FLOOR(RAND() * 10000))
    FROM article;
    
    
    